#!/bin/bash

# Script for playing video in ascii
#
# Required programs:
#>	jp2a
#>	ffmpeg

# Interesting features:
#>	Stopping/Unstopping
#>	Controlling via network


export LC_ALL="C"

NUMBER_REGEX='^-?[0-9]+$'
POSITIVE_NUMBER_REGEX='^[0-9]+$'
NEGATIVE_NUMBER_REGEX='^-[0-9]+$'

program_installed_or_exit() {
	if ! type -P "$1" >/dev/null; then
		echo "Error: $1 not found" >&2
		exit 1
	fi
}

program_installed_or_exit ffmpeg
program_installed_or_exit jp2a

if [[ ! -z $1 ]]; then
	VIDEO="$1"
else
	echo "Error: Video not specified." 1>&2
	exit 1
fi


if [[ ! -r $1 ]]; then
	echo "Error: Video file is unaccesable." 1>&2
	exit 1
fi

VIDEO_PATH="$PWD/$VIDEO"

[[ -z $WIDTH ]] && WIDTH=200
[[ -z $PRELOAD ]] && PRELOAD=0


check_program_arch() {

	readelf -h "$1" | grep 'Class:' | sed 's/^.*Class:[^0-9]*\([0-9].*\)/\1/'
}

arch_to_unix_namespace_sign() {
	[[ "$1" == "32" ]] || printf "$1"
}


FFMPEG_ARCH=$(check_program_arch "$(type -P ffmpeg)")

# Clean up script data
clean() {
	kill $(jobs -p) 2>/dev/null
	rm -r "$TMP_NAME"
	# Make cursor visible
	tput cnorm -- normal
	echo
	exit 0
}

# Get full nanoseconds
fullnano() {
	date '+%s%N'
}

CPU() {
	ffmpeg -i "$1" -threads $USED_THREADS $3 -vf scale=${WIDTH}x${HEIGHT} "$2"
}

CUDA() {
	ffmpeg -hwaccel cuda -i "$1" $3 "$2"
}

VAAPI() {
	ffmpeg -hwaccel vaapi -hwaccel_output_format vaapi -hwaccel_device "$DRI_RENDERER" -i "$1" $3 -c:v mjpeg_vaapi "$2"
}

seek_and_cut_media() {
	local MEDIA="$1"
	local SEEKTO="$2"
	local OUTPUT="$3"
	rm "$OUTPUT" 2>/dev/null
	ffmpeg -ss "$SEEKTO" -i "$MEDIA" -codec copy "$OUTPUT" 2>/dev/null <<< y
}


# Divide operation using builtin commands
floating_divide() {
	local PRECISION_N=$1
	local BASE=$2
	local DIVIDER=$3

	DIVIDE_RESULT=$((BASE/DIVIDER))
	local DIVIDE_RESULT_BASE_END=$((${#DIVIDE_RESULT}-PRECISION_N))
	DIVIDE_RESULT="${DIVIDE_RESULT:0:DIVIDE_RESULT_BASE_END}.${DIVIDE_RESULT:DIVIDE_RESULT_BASE_END:PRECISION_N}"
}

interval() {
	local T_BEGINNING=$(fullnano)
	"$@" || return 1
	local T_ENDING=$(fullnano)
	INTERVAL_DIFF=$((T_ENDING-T_BEGINNING))
}

# Cat using builtin commands
_cat() {
	local DATA="$(<$1)"
	[[ $? -eq 0 ]] || return 1
	echo "$DATA"
}


if [[ $DEBUG -ge 1 ]]; then
	echo "System cat time: "
	time cat /proc/self/status >/dev/null

	echo "Builtin cat time: "
	time _cat /proc/self/status >/dev/null

	if [[ $DEBUG == 2 ]]; then
		exit 0
	fi
fi


pl_send_seek_backward() {
	local SEC="$1"

	printf 'c' >&6
	echo "$SEC" >&6
}

pl_send_restart() {
	printf 'r' >&6
}

pl_get_timestep() {
	printf 't' >&6
	read -r -u 5 PL_TIMESTEP
}

pl_set_timestep() {
	local TIMESTEP="$1"

	printf 'u' >&6
	echo "$TIMESTEP" >&6
}

ev_stop() {
	kill -19 $PLAYER_PID $APLAYPID 2>/dev/null
	STOP_TIME_START=$(fullnano)
}

ev_continue() {
	kill -18 $PLAYER_PID $APLAYPID
	[[ -n $STOP_TIME_START ]] || return 1
	if [[ -z $1 ]]; then
		STOP_TIME_END=$(fullnano)
		pl_send_seek_backward $((STOP_TIME_END-STOP_TIME_START))
	fi
	STOP_TIME_START=
}

ev_restart() {
	ev_continue 1
	stop_sound
	play_sound "$SOUNDNAME"
	pl_send_restart
}

# Execute an seek event
ev_move() {
	local TIMESTEP_SEC
	local PL_REV_TIMESTEP

	[[ -n $1 ]] && seconds=$1 || read -s -t2 seconds
	[[ $seconds =~ $NUMBER_REGEX ]] || return 1
	ev_continue 1
	pl_get_timestep
	PL_REV_TIMESTEP=$((PL_TIMESTEP+1000000000*seconds))
	TIMESTEP_SEC=$(echo "$PL_REV_TIMESTEP/1000000000" | bc -l)
	seek_and_cut_media "$SOUNDNAME" $TIMESTEP_SEC "$SOUNDNAME_SEEKED" || return 1
	stop_sound
	play_sound "$SOUNDNAME_SEEKED"
	pl_set_timestep "$PL_REV_TIMESTEP"
}

ev_go() {
	local PL_REV_TIMESTEP

	read -s -t2 seconds
	[[ $seconds =~ $POSITIVE_NUMBER_REGEX ]] || return 1
	ev_continue 1
	PL_REV_TIMESTEP=$((1000000000*seconds))
	seek_and_cut_media "$SOUNDNAME" $seconds "$SOUNDNAME_SEEKED" || return 1
	stop_sound
	play_sound "$SOUNDNAME_SEEKED"
	pl_set_timestep "$PL_REV_TIMESTEP"
}

ev_step() {
	local ARROW="$1"
	local STEP_SIZE="$2"
	case $ARROW in
		'[D' ) ((STEP_SIZE=-STEP_SIZE));;
		'[C' ) ;;
	esac
	ev_move $STEP_SIZE
}

ev_quit() {
	clean
}

PILOT_FIFO_NAME="controller.fifo"
# Port for a network pilot controller
NETWORK_PILOT_PORT=65000


# Listen for keyboard events
ev_listen() {

	# Create FIFO for signalling an UI
	#mknod "$PILOT_FIFO_NAME" p || { echo "Warning cannot create named pipe for player controlling. Interactive user interface will not be available" >&2; return 1; }

	exec 5<&${PLAYER_PIPE[0]}
	exec 6>&${PLAYER_PIPE[1]}

	# Start network pilot listener
	#coproc NETWORK_PILOT_PIPE { netcat -l $NETWORK_PILOT_PORT; } 

	#exec 7<&${NETWORK_PILOT_PIPE[0]}
	#exec 8>&${NETWORK_PILOT_PIPE[1]}

	while true; do
		read -s -n1 c
		[[ $c == $'\x1b' ]] && read -s -n2 c

		case $c in
		# Stop
		's' )	  ev_stop;;
		# Continue
		'c' )	  ev_continue;;
		# Restart
		'r' )	  ev_restart;;
		# Move/Rewind
		'm' )	  ev_move;;
		# Go into
		'g' )	  ev_go;;
		# Quit
		'q' )	  ev_quit;;
		# Fast rewind
		'['[DC] ) ev_step $c 10;;

		esac
	done

}

# Convert frames to ascii
encode_once() {
	while [[ ! -f "$1" ]]; do
		continue
	done

	jp2a "$1" --width="$WIDTH" --colors
	rm "$1" &
}

# Export frames from video
decode_frames() {
		$CODEC "$VIDEO_PATH" "%01d.jpg" 2>/dev/null
}

DEC_FPS=0

calc_decoder_fps() {
	if [[ -z "$DEC_ENDED" ]]; then
		if [[ -d /proc/$MPPID ]]; then
	
			DEC_NOW_TIME=$(fullnano)
			DEC_NOW_FRAME=( *.jpg )
			DEC_NOW_FRAME=${#DEC_NOW_FRAME[@]}
			if [[ -z $DEC_LAST_FRAME ]]; then
				DEC_LAST_FRAME="$DEC_NOW_FRAME"
				DEC_LAST_TIME=$DEC_NOW_TIME
				printf '0'
				return
			fi

			DEC_FPS=$(echo "1000000000/($DEC_NOW_TIME-$DEC_LAST_TIME)*($DEC_NOW_FRAME-$DEC_LAST_FRAME) / 1" | bc)

			DEC_LAST_FRAME=$DEC_NOW_FRAME
			DEC_LAST_TIME=$DEC_NOW_TIME
		else
			DEC_ENDED=1
		fi
	fi
	printf "$DEC_FPS"


}

encode_ascii() {

	local ctr=1
	START_T=$(fullnano)
	while [ "$ctr" -lt "$FRAMES_OVER" ]; do
		for i in $(seq 1 $((${USED_THREADS}-1))); do
			fram_ind=$((ctr+i))
			encode_once "${fram_ind}.jpg" >${fram_ind}.txt &
		done

		encode_once "${ctr}.jpg" >${ctr}.txt
		ctr=$((ctr+USED_THREADS))
		wait	

		# Calculate fps and save it to a file
		END_T=$(fullnano)
		DELTA_FPS=$(echo "scale=2;1000000000/($END_T-$START_T)*$USED_THREADS" | bc -l)
		printf "$DELTA_FPS" > deltafps_ascii.txt
		START_T="${END_T}"
		calc_decoder_fps > deltafps_jpg.txt
	done

}


DetectGPU() {

	echo "Detecting GPU.." 1>&2

	[[ -z "$DRI_RENDERER" ]] && set_master_renderer

	DEV_PATH="/sys/class/drm/$(basename "${DRI_RENDERER}")/device"

	# Get GPU name from the pci identificator

	# Add super user directories to the PATH
	export PATH="$PATH:/sbin:/usr/sbin"

	PCI_BUS="$(grep 'PCI_SLOT_NAME' "$DEV_PATH/uevent" | sed 's/^[^=]*=//g')"
	GPU="$(lspci -s "$PCI_BUS" 2>/dev/null)"

	if [[ $? -eq 0 ]]; then
		GPU="$(echo "$GPU" | sed 's/^[^ ]* [^:]*: //g')"
		return 0
	fi

	echo "GPU detected." 1>&2
}


test_codec() {

	local result
	$1 "$VIDEO_PATH" out.jpg "-vframes 1" 2>/dev/null
	result=$?
	rm out.jpg 2>/dev/null
	return $result
}

set_master_renderer() {
	DRI_MASTER_RENDERER="$(readlink -f "/dev/dri/by-path/pci-0000:$(lspci | grep 'VGA' | cut -d' ' -f1)-render")"
	DRI_RENDERER="$DRI_MASTER_RENDERER"
}

check_whether_vaapi_is_redirected() {

	if [[ -n "$LIBVA_DRIVERS_PATH" ]]; then

		IFS=':'
		for i in $LIBVA_DRIVERS_PATH; do
			echo "$i" | grep -q "/usr/lib$(arch_to_unix_namespace_sign ${FFMPEG_ARCH})/dri" && continue
			if [[ $(check_program_arch "$(find "$i" -maxdepth 1 -name "*.so" -type f | head -n1)") == ${FFMPEG_ARCH} ]]; then
				echo "$i"
				return 0
			fi
		done
		IFS=
	fi

	return 1

}

set_vaapi_supported_renderer() {

	set_master_renderer

	DRI_RENDERERS="$(find /dev/dri/ -maxdepth 1 -name "render*" -type c | grep -v "$DRI_MASTER_RENDERER")"

	for i in {1..2}; do
		for i in $DRI_MASTER_RENDERER $DRI_RENDERERS; do

			DRI_RENDERER="$i"	
			test_codec VAAPI && return 0

		done

		if [ $i != 2 ] && redirect_path="$(check_whether_vaapi_is_redirected)"; then
			echo "VAAPI ${FFMPEG_ARCH}-bit drivers path was set to "${redirect_path}", but the drivers there doesn't seem to exist or work. Trying a default." >&2
			unset LIBVA_DRIVERS_PATH
		fi
	done

	DRI_RENDERER="$DRI_MASTER_RENDERER"

	return 1



}

testCodecs() {

	if [[ ! -z $CODEC ]]; then
		if [[ $CODEC == "CPU" ]]; then
			GPU="$CPUN"
		fi
		return 0
	fi

	echo "Testing for VAAPI.." 1>&2

	if ! set_vaapi_supported_renderer; then
		echo "Warning: VAAPI is not available on your platform. Maybe just replace your GPU with AMD or Intel.." 1>&2
	else
		CODEC=VAAPI
		echo "VAAPI works." 1>&2
		return 0
	fi

	echo "Testing for CUDA.." 1>&2

	if ! test_codec CUDA; then
		echo "Warning: CUDA also doesn't work, what means you haven't got a NVIDIA card or it is epic old." 1>&2
	else
		CODEC=CUDA
		echo "CUDA works." 1>&2
		return 0
	fi


	echo "None of supported GPU-accelerated decoders doesn't work.." 1>&2
	echo "Using CPU" 1>&2
	
	GPU="$CPUN"

	CODEC=CPU

	return 1

}


# Play the sound
play_sound() {

	local SOUND_PATH="$1"

	aplay "$SOUND_PATH" -B 20 2>/dev/null &
	APLAYPID=$!
}

# Stop the sound
stop_sound() {
	kill $APLAYPID
	APLAYPID=
}

# Get CPU name
CPUSTAT="$(lscpu)"
CPUN="$(echo "$CPUSTAT" | grep 'Model name:' | sed 's/^[^:]*: *\([^ ].*\)$/\1/g')"

# Get informations about the video
STATUS="$(ffmpeg -i "$VIDEO" 2>&1)" 								# Status data

# Create a temporary directory in a shared memory file system
TMP_NAME="/dev/shm/jpvideo-$$-frames"
mkdir "$TMP_NAME"

if [[ ! $? -eq 0 ]]; then
	echo "Error: Cannot create a temporary directory for frames." 1>&2
	exit 1
fi

# Move into a temporary directory
cd "$TMP_NAME"

# Check for available codecs
testCodecs && DetectGPU

DURATION="$(echo "$STATUS" | grep 'Duration:' | sed 's/^.*Duration: \([^,]*\),.*$/\1/g')"	# Video duration in ffmpeg format (eg. 01:05:43.54)
SECS="$(echo "$DURATION" | awk -F ':' '{ printf("%f", $1*3600+$2*60+$3) }')"			# Video duration in second
SECS_INT="$(printf "%i" "$SECS" 2>/dev/null)"
SECS_NS="$(echo "$SECS*1000000000" | bc)"
FPS="$(echo "$STATUS" | grep -v 'Input' | grep 'fps' | sed 's/^.* \([0-9\.]*\) fps.*$/\1/g')"	# Frames Per Second
FPS_INT="$(printf "%i" "$FPS" 2>/dev/null)"
SPF=$(echo "$FPS" | awk '{ printf("%f", 1/$1) }')						# Seconds Per Frame
FPN="$(echo "$FPS" | awk ' { printf("%.9f", $1/1000/1000/1000) } ')"				# Frames Per Nanosecond
FRAMES="$(echo "$FPS" "$SECS" | awk ' { printf("%i", int($1*$2)) } ')"				# Frames count
FRAMES_OVER=$((FRAMES+1))
PROPORTION="$(echo "$STATUS" | grep 'SAR' | sed 's/^.*DAR \([0-9\:]*\)[^0-9\:].*$/\1/g')"	# Proportion (eg. 16:9)
PROPORTION_DIV="$(echo $PROPORTION | awk -F ':' ' { printf("%f",$1/$2) } ')"			# Divided proportion (eg. 1.77)
HEIGHT="$(echo "$WIDTH" "$PROPORTION_DIV" | awk ' { printf("%i",$1/$2) } ')"			# Output video height
#FramesPerCall=$((FPS_INT*32))									# Frames per each ffmpeg call

if [[ -z $SECS || -z $FPS ]]; then
	echo "Error: Cannot get informations about the video." 1>&2
	exit 1
fi


# Get threads count
THREADS_COUNT="$(echo "$CPUSTAT" | grep '^CPU(s):' | sed 's/^[^0-9]*\([0-9].*\)$/\1/g')"
[[ -z $USED_THREADS ]] && USED_THREADS="$((THREADS_COUNT/2))"


SOUNDNAME="sound.wav"
SOUNDNAME_SEEKED="sound-seeked.wav"

echo "Decoding the audio..." 1>&2

# Export the sound
ffmpeg -i "$VIDEO_PATH" "$SOUNDNAME" 2>/dev/null

if [[ ! $? -eq 0 ]]; then
	echo "Warning: Cannot export sound. Video is going to be quiet" 1>&2
else
	echo "Audio decoded." 1>&2
fi


# Export frames in another process
decode_frames &
MPPID=$!


[[ $PRELOAD ]] && sleep $PRELOAD

# Convert them in another process
encode_ascii &
ASCPID=$!

#sleep 30

# Clear the screen
clear
# Make cursor invisible
tput civis -- invisible

# Play the sound
play_sound "$SOUNDNAME"

stats() {

printf "
\033[7;21mName: $VIDEO | Frame: ${NOW_INDEX}/${FRAMES} | Second: $((NOW_INDEX/FPS_INT))/${SECS_INT} | Player speed: ${DIVIDE_RESULT} FPS | FPS: ${FPS} | CPUs: ${THREADS_COUNT} | Threads: ${USED_THREADS}	
Video decoder - Codec: $CODEC | Speed: $(cat deltafps_jpg.txt 2>/dev/null) FPS | Hardware: $GPU | \033[7;21mStatus: " 
pgrep -P $$ | grep "$MPPID" >/dev/null && printf "Working!" || printf "Finished"
printf "	
\033[7;21mAscii encoder - Codec: CPU | Speed: $(cat deltafps_ascii.txt 2>/dev/null) FPS | Hardware: ${CPUN} | \033[7;21mStatus: "
pgrep -P $$ | grep "$ASCPID" >/dev/null && printf "Working!" || printf "Finished"
printf "	\033[0m"

}

PS_PRECISION=100
NS_M_PS_PRECISION=$((1000000000*PS_PRECISION))

play_frames() {

	# Play each frame
	COUNT_NANO=0
	START_NANO=$(fullnano)
	NOW_INDEX=0	

	while [ "$NOW_INDEX" -lt "$FRAMES_OVER" ]; do

		NOW_NANO=$(fullnano)
		while read -t 0 -u 3; do
			read -n 1 -u 3 OPERATION
			case $OPERATION in
				# Seek backward
				'c' )
					read -r -u 3 STOP_TIME

					START_NANO=$((START_NANO+STOP_TIME))
					((START_NANO >= NOW_NANO)) && START_NANO=$NOW_NANO
					;;
				# Seek beginning
				'r' )
					START_NANO=$NOW_NANO
					;;
				# Get the current timestep
				't' )
					CURR_TIMESTEP=$(echo "$NOW_NANO-$START_NANO")
					echo "$CURR_TIMESTEP" >&4
					;;
				# Set the current timestep
				'u' )
					read -r -u 3 CURR_TIMESTEP
					[[ $CURR_TIMESTEP =~ $POSITIVE_NUMBER_REGEX ]] && START_NANO=$((NOW_NANO-CURR_TIMESTEP))
					;;
			esac
		done

		NOW_INDEX="$(echo "(($NOW_NANO-$START_NANO)*$FPN+1) / 1" | bc)"
		 # Move cursor to the beginning
		printf "\033[1;1H"
		if _cat "${NOW_INDEX}.txt" 2>/dev/null; then
			LAST_GOOD_INDEX="$NOW_INDEX"
		else
			_cat "${LAST_GOOD_INDEX}.txt" 2>/dev/null
		fi
		#PLAYER_FPS=$(echo "scale=2;1000000000/($NOW_NANO-$COUNT_NANO)" | bc)
		#PLAYER_FPS=$((NS_M_PS_PRECISION/(NOW_NANO-COUNT_NANO)))
		#PLAYER_FPS_BASE_END=$((${#PLAYER_FPS}-2))
		#PLAYER_FPS="${PLAYER_FPS:0:PLAYER_FPS_BASE_END}.${PLAYER_FPS:PLAYER_FPS_BASE_END:2}"

		floating_divide 2 100000000000 $((NOW_NANO-COUNT_NANO))

		COUNT_NANO=$NOW_NANO
		stats
	done

	kill $$

}

start_player() {

	exec 5<&0
	exec 6>&1
	coproc PLAYER_PIPE { play_frames 3<&0 4>&1 0<&5 1>&6 5>&- 6>&-; }
	PLAYER_PID=$!
	exec 5>&-
	exec 6>&-

}

trap clean SIGINT SIGTERM
trap menu_trap SIGUSR1

start_player

ev_listen

wait

# Clean up
clean
